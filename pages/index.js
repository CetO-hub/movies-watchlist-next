import Head from "next/head";
import Image from "next/image";
import explore from "../src/img/explore.svg";
import { useEffect, useState } from "react";
import Movies from "../src/components/Movies";
import Header from "../src/components/Header";
import { useRouter } from "next/router";

export default function Home(props) {
  const [message, setMessage] = useState("");
  const [storedMovies, setStoredMovies] = useState(() => {
    let currentValue;
    try {
      currentValue = JSON.parse(localStorage.getItem("storedMovies") || "");
    } catch (error) {
      currentValue = "";
    }
    return currentValue;
  });

  const [dataMovie, setDataMovie] = useState([
    {
      title: "",
      runtime: "",
      genre: "",
      poster: "",
      imdbRating: "",
      imdbID: "",
      plot: "",
    },
  ]);
  const router = useRouter();
  const [searchMovie, setSearchMovie] = useState({
    search: "",
  });

  useEffect(() => {
    localStorage.setItem("storedMovies", JSON.stringify(storedMovies));
  }, [storedMovies]);

  function addToWatchlist(e, id) {
    if (storedMovies.find((item) => item.imdbID === id)) return;
    setStoredMovies((oldState) => {
      let item = dataMovie.filter((movie) => movie.imdbID === id);
      return [...oldState, ...item];
    });
  }

  function handleOnChange(e) {
    const { name, value } = e.target;
    setSearchMovie((oldState) => {
      return {
        [name]: value,
      };
    });
  }

  function handleSubmit(e) {
    router.push(`/?s=${searchMovie.search}`);
    setDataMovie([
      {
        title: "",
        runtime: "",
        genre: "",
        poster: "",
        imdbRating: "",
        imdbID: "",
        plot: "",
      },
    ]);
    if (props.message) {
      setMessage(props.message);
    }

    e.preventDefault();
  }
  useEffect(() => {
    if (props.movieDetails) {
      setDataMovie((oldState) => {
        return props.movieDetails.map((movie) => {
          return {
            title: movie.Title,
            runtime: movie.Runtime,
            genre: movie.Genre,
            poster: movie.Poster,
            imdbRating: movie.imdbRating,
            imdbID: movie.imdbID,
            plot: movie.Plot,
          };
        });
      });
      setMessage("");
    }
  }, [props]);

  return (
    <div>
      <Head>
        <title>Movie Search</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex flex-col items-center">
        <Header
          handleOnChange={handleOnChange}
          handleSubmit={handleSubmit}
          searchMovie={searchMovie}
        />
        {message && <h2>{message}</h2>}
        {!dataMovie[0].title ? (
          <div className="h-[calc(100vh-200px)] md:h-[calc(100vh-300px)] lg:h-[calc(100vh-400px)] w-full flex flex-col items-center px-8  relative">
            <div className=" flex flex-col items-center justify-center absolute top-[50%] left-[50%] translate-x-[-50%] translate-y-[-50%]">
              <div className="h-[80px] w-[80px] relative">
                <Image src={explore} layout="fill" objectFit="cover" />
              </div>
              <h2 className="text-gray-400">Start exploring</h2>
            </div>
          </div>
        ) : (
          <Movies
            dataMovie={dataMovie}
            addToWatchlist={addToWatchlist}
            page={"index"}
          />
        )}
      </main>
    </div>
  );
}

export async function getServerSideProps({ query }) {
  if (query.s) {
    const res = await fetch(
      `http://www.omdbapi.com/?apikey=${process.env.MOVIE_DATABASE_API_KEY}&s=${query.s}&type=movie&series`
    );

    const data = await res.json();
    if (data.Response === "False") {
      return {
        props: {
          message: "Too many results",
        },
      };
    }

    const movieIDArray = data.Search.map((movie) => movie.imdbID);

    const movieDetails = await Promise.all(
      movieIDArray.map(async (id) => {
        const res = await fetch(
          `http://www.omdbapi.com/?apikey=${process.env.MOVIE_DATABASE_API_KEY}&i=${id}`
        );
        const data = await res.json();
        return data;
      })
    );

    return {
      props: { movieDetails }, // will be passed to the page component as props
    };
  }
  return {
    props: {
      message: "Please enter a search term",
    },
  };
}
